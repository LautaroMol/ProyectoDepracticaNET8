@page "/Personas/edit/{PersonaId:int}"
@inject IHttpService http
@inject NavigationManager navigationManager

<h3>Editar Persona con DNI: </h3>

<EditForm Model="@entity" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudNumericField Label="Documento" HelperText="Máx. 10 números"
                                     @bind-Value="@entity.NumDoc" For="@(() => entity.NumDoc)" MaxLength="10">
                    </MudNumericField>
                    <MudTextField Label="Nombre" HelperText="Máx. 70 caracteres"
                                  @bind-Value="@entity.Nombre" MaxLength="70">
                    </MudTextField>
                    <MudTextField Label="Apellido" HelperText="Máx. 70 caracteres"
                                  @bind-Value="@entity.Apellido" MaxLength="70">
                    </MudTextField>

                    @if (flagTdoc)
                    {
                        <MudSelect Label="Select type of document" @bind-Value="entity.TDocumentoId">
                            @foreach (var tdoc in listaDocumentos)
                            {
                                <MudSelectItem Value="@tdoc.Id" >
                                    @tdoc.Nombre
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudText Color="Color.Error">Sin documentos cargados</MudText>
                    }

                    @if (selectedTdoc != "")
                    {
                        <p>Tu selección previa: @selectedTdoc</p>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        Guardar
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancelar">
                        Cancelar
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validaciones</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Éxito</MudText>
                }
                else
                {
                    <MudText Color="Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Información de error:
                @msg
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter] public int PersonaId { get; set; }
    private Persona entity = new Persona();
    bool success;
    string msg = "";
    bool flag;
    public string MsgTDoc = "";
    bool flagTdoc = true;
    string selectedTdoc = "";
    List<TDocumento> listaDocumentos = new List<TDocumento>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Show();
            await GetDocTypes();

            var documento = listaDocumentos.Find(x => x.Id == entity.TDocumentoId);
            selectedTdoc = documento != null ? documento.Nombre : "Tipo de documento no encontrado";
        }
        catch (Exception ex)
        {
            msg = $"Error al inicializar: {ex.Message}";
        }
    }

    private async Task GetDocTypes()
    {
        var respuesta = await http.Get<List<TDocumento>>("api/TDocumentos");
        if (!respuesta.Error)
        {
            listaDocumentos = respuesta.Response;
        }
        else
        {
            MsgTDoc = "Sin documentos cargados";
            flagTdoc = false;
        }
    }

    private void SelectDocument(int id, string nombre)
    {
        entity.TDocumentoId = id;
        selectedTdoc = nombre;
    }

    public async Task Show()
    {
        try
        {
            var persona = await http.Get<Persona>($"/api/Persona/Id/{PersonaId}");
            if (persona != null && !persona.Error)
            {
                entity = persona.Response;
            }
            else
            {
                msg = "Error al traer datos de la persona.";
            }
        }
        catch (Exception ex)
        {
            msg = $"Error al obtener datos: {ex.Message}";
        }
    }

    private async Task Grabar()
    {
        try
        {
            flag = true;

            // Verificar si el número de documento ya existe
            var resp = await http.Get<List<Persona>>("api/Personas");
            var list = resp.Response;
            foreach (Persona ent in list)
            {
                if (ent.NumDoc == entity.NumDoc && ent.Id != entity.Id)
                {
                    msg = $"El número de documento {ent.NumDoc} ya está cargado.";
                    flag = false;
                    return;
                }
            }

            if (flag)
            {
                var httpresponse = await http.Put<Persona>($"api/Personas/{PersonaId}", entity);
                if (httpresponse.Error)
                {
                    msg = "Error al guardar los cambios en el servidor.";
                    return;
                }

                // Redirigir después del éxito
                success = true;
                navigationManager.NavigateTo("/Personas");
            }
        }
        catch (Exception ex)
        {
            msg = $"Error al guardar: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/Personas");
    }
}
