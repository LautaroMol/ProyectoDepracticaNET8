@page "/Personas/Create"
@inject HttpClient httpClient
@inject IHttpService http
@inject NavigationManager navigationManager
@using MudBlazor


<h1>Nueva Persona</h1>

<EditForm Model="@entity" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudNumericField Label="document of the Type person" HelperText="Max 10 numbers"
                    @bind-Value="@entity.NumDoc" For="@(()=>entity.NumDoc)" MaxLength="10">
                    </MudNumericField>
                    <MudTextField Label="first name of the type of persona" HelperText="Max 70 characters"
                    @bind-Value="@entity.Nombre" MaxLength="70">
                    </MudTextField>
                    <MudTextField Label="Last name of the type of persona" HelperText="Max 70 characters"
                    @bind-Value="@entity.Apellido" MaxLength="70">
                    </MudTextField>
                    <MudMenu Label="Seleccionar tipo de documento">

                        @if (@flagTdoc == false)
                        {
                            <MudMenuItem>@MsgTDoc</MudMenuItem>
                        }else{
                            @foreach (TDocumento tdoc in listaDocumentos){
                                <MudMenuItem onclick="()=> SelectDocument(tdoc.Id, tdoc.Nombre)">@tdoc.Nombre</MudMenuItem>
                            }
                        }
                    </MudMenu>
                    @if (selectedTdoc!=""){
                        <p>Your selection: @selectedTdoc</p>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancelar">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validations</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Error info:
                @msg
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private Persona entity = new Persona();
    bool success;
    string msg = "";
    bool flag;
    public string MsgTDoc = "";
    bool flagTdoc = true;
    string selectedTdoc ="";
    List<TDocumento> listaDocumentos = new List<TDocumento>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetDocTypes();
    }
    private async Task Grabar()
    {
        flag = true;
        var resp = await http.Get<List<Persona>>("api/Personas");
        var list = resp.Response;

        foreach (Persona doc in list)
        {
            if (doc.NumDoc == entity.NumDoc)
            {
                msg = $"El Dni {doc.NumDoc} ya esta siendo cargado en la base de datos";
                flag = false;
                return;
            }
        }

        if (flag)
        {
            var httpresponse = await http.Post<Persona>("api/Personas", entity);
            if (httpresponse.Error)
            {
                var body = httpresponse.HttpResponseMessage;
            }
            navigationManager.NavigateTo("/Personas");
        }
    }

    private async Task GetDocTypes()
    {
        var respuesta = await http.Get<List<TDocumento>>("api/TDocumentos");
        if (!respuesta.Error)
        {
            listaDocumentos = respuesta.Response;
        }
        else
        {
            MsgTDoc = "Sin documentos cargados";
            flagTdoc = false;
        }
    }
    private void SelectDocument(int id, string nombre)
    {
        entity.TDocumentoId = id;
        selectedTdoc = nombre;
    }
    private void Cancelar()
    {
        navigationManager.NavigateTo("/Personas");
    }

}
