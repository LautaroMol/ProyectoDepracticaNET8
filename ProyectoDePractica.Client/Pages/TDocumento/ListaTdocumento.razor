@page "/TDocumentos"
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IHttpService http
@using MudBlazor


<h3>Lista de tipos de documentos</h3>
<br/>
<MudButton Variant="Variant.Filled" href="/TDocumentos/crear">Agregar Tipo de Documento</MudButton>
<br />

<MudTable Items="@listaDocumentos" Hover="@hover" Bordered="@bordered" class="mat-elevation-z">
    <ToolBarContent>
        <MudText>Lista de tipos de documentos</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Codigo</MudTh>
        <MudTh>Nombre</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Codigo</MudTd>
        <MudTd>@context.Nombre</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" HRef="@($"TDocumentos/editar/{context.Id}")">
                Editar
            </MudButton>
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
            @onclick = "()=> delete(context)">
                Borrar
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>




@code {
    List<TDocumento> listaDocumentos = new List<TDocumento>();
    private bool hover = true;
    private bool bordered = true;
    public string Msg = "";

    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public EventCallback<string> OnButtonClick { get; set; }
    private Confirmation confirmation;
    private TDocumento entityToDelete;


    public string state = "Message box hasn't been opened yet";


    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer(){
        var respuesta = await http.Get<List<TDocumento>>("api/TDocumentos");
        if(!respuesta.Error){
            listaDocumentos = respuesta.Response;
        }else{
            Msg = await respuesta.GetError();
        }
    }

    private async Task delete(TDocumento entity){
        bool? result = await DialogService.ShowMessageBox(
            $"Warning you gonna delete the following Type of document {entity.Nombre}",
            "Are you sure you want to delete?",
            yesText: "Confirm!", cancelText: "Cancel");
        state = result == null ? "Canceled" : "Deleted!";
        StateHasChanged();
        if (OnButtonClick.HasDelegate)
        {
            await OnButtonClick.InvokeAsync(state);
        }

        if (state == "Deleted!")
        {
            var resp =await http.Delete($"api/TDocumentos/{entity.Id}");
            await Leer();
        }else{
            return;
        }
    }


}
