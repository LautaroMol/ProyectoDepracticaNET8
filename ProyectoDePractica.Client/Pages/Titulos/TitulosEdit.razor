@page "/Titulos/edit/{TituloId:int}"
@inject IHttpService http
@inject NavigationManager navigationManager

<h3>Edicion de titulo</h3>

<EditForm Model="@entity" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="first name of the type of persona" HelperText="Max 4 characters"
                    @bind-Value="@entity.Codigo" MaxLength="4">
                    </MudTextField>
                    <MudTextField Label="Last name of the type of persona" HelperText="Max 100 characters"
                    @bind-Value="@entity.Nombre" MaxLength="100">
                    </MudTextField>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancelar">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validations</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Error info:
                @msg
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter] public int TituloId { get; set; }
    private Titulo entity = new Titulo();
    bool success;
    string msg = "";
    bool flag;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Show();
    }
    public async Task Show()
    {
        var persona = await http.Get<Titulo>($"/Titulo/{TituloId}");
        if (persona != null && !persona.Error)
        {
            entity = persona.Response;
        }
        else
        {
            msg = "Error al traer datos";
        }
    }
    private async Task Grabar()
    {
        flag = true;
        var resp = await http.Get<List<Titulo>>("api/Titulos");
        var list = resp.Response;

        foreach (Titulo ent in list)
        {
            if (ent.Codigo == entity.Codigo && ent.Id != entity.Id )
            {
                msg = $"El codigo {ent.Codigo} ya esta siendo usado en el sistema";
                flag = false;
                return;
            }
        }

        if (flag)
        {
            var httpresponse = await http.Put<Titulo>($"/api/Titulos/{entity.Id}", entity);
            if (httpresponse.Error)
            {
                var body = httpresponse.HttpResponseMessage;
            }
            navigationManager.NavigateTo("/Titulos");
        }
    }
    private void Cancelar()
    {
        navigationManager.NavigateTo("/Titulos");
    }
}
